/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/groovyModule.gradle"
apply plugin: "application"
mainClassName = "" // This will not be used, as the run task is overwritten

configurations {
  reports
}

repositories {
  maven { url "https://repo.gradle.org/gradle/repo" }
}
dependencies {
  compile commonDependencies.groovy
  compile commonDependencies.toolingApi, {
    exclude group: "org.slf4j", module: "slf4j-api"
  }
  compile "org.slf4j:slf4j-simple:${commonVersions.slf4j}"
  testCompile commonDependencies.spock, {
    exclude group: "org.slf4j", module: "slf4j-api"
  }
}

task createApps {
  inputs.files "src/apps"
  inputs.files "src/common"
  inputs.property "version", version
  outputs.dir "$buildDir/apps"

  doLast {
    def (int major, int minor, int patch) = (version - "-SNAPSHOT").split("\\.")*.toInteger()

    def head = [
      label: "head", version: version, major: major, minor: minor, patch: patch, snapshot: version.endsWith("-SNAPSHOT")
    ]

    def base = head + [label: "base", patch: head.patch - 1, snapshot: false, version: "${major}.${minor}.${patch - 1}"]

    file("src/apps").eachDir { source ->
      [base, head].each { params ->
        def destination = file("$buildDir/apps/$source.name/$params.label")
        copy {
          from "src/common"
          from source
          into destination
          expand params
        }

        copy {
          from "$source/src-${params.label}"
          into "$destination/src"
          expand params
        }

        def buildScript = """
buildscript {
  repositories {
    maven { url "${rootDir.toURI()}build/localrepo" }
    jcenter()
  }
  dependencies {
    classpath "io.ratpack:ratpack-gradle:$params.version"
  }
}

apply plugin: "io.ratpack.ratpack-groovy"

repositories {
  maven { url "${rootDir.toURI()}build/localrepo" }
  jcenter()
}

dependencies {
  compile 'org.slf4j:slf4j-simple:${commonVersions.slf4j}'
}

version = "$params.version"

configureRun.doLast {
  run {
    systemProperty "ratpack.development", "false"
    systemProperty "ratpack.timeResponses", "true"
    systemProperty "endpoint", project.endpoint
    maxHeapSize "128m"
  }
}
"""
        def buildFile = file("$destination/build.gradle")
        buildFile.text = buildScript + buildFile.text
      }
    }
  }
}

task run(type: PerfTestRun, overwrite: true) {
  dependsOn createApps, { apiModules*.install }, ":ratpack-gradle:install"
  main "ratpack.perf.Harness"
  classpath = sourceSets.main.runtimeClasspath
  systemProperty "appsBaseDir", file("$buildDir/apps").absolutePath
  systemProperty "localRepo", rootProject.file("build/localrepo").absolutePath
  systemProperty "gradleUserHome", gradle.gradleUserHomeDir.absolutePath
  systemProperty "gradleHome", gradle.gradleHomeDir.absolutePath
  systemProperty "resultsDir", file("$buildDir/results/${new Date().format("yyyyMMddHHmmss")}")
}

class PerfTestRun extends JavaExec {

  @org.gradle.api.tasks.options.Option(option = "filter", description = "comma separated list of benchmarks to run")
  void filter(String filter) {
    systemProperty "filter", filter
  }

  @org.gradle.api.tasks.options.Option(option = "quick", description = "reduce the sample size")
  void quick(boolean flag) {
    systemProperty "quick", flag
  }

  @org.gradle.api.tasks.options.Option(option = "smoke", description = "just exercise the benches to make sure they work")
  void smoke(boolean flag) {
    systemProperty "smoke", flag
  }

}
