/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import ratpack.gradle.WriteTestConfig

import io.freefair.gradle.plugins.jsass.SassCompile

import static org.apache.commons.io.FileUtils.copyURLToFile
import static org.apache.commons.lang3.SystemUtils.*

buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://jitpack.io' }
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    classpath commonDependencies.jsass
    // Use the master version of gradle-js-plugin since it fixes a Gradle 6 deprecation (from JitPack.io)
    classpath "com.github.eriwen:gradle-js-plugin:d15f4ae"
    classpath "com.google.javascript:closure-compiler:v20220202" //v20150315
  }
}

apply from: "$rootDir/gradle/javaModule.gradle"
apply plugin: "io.ratpack.ratpack-java"
apply plugin: "org.gradle.groovy"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'io.freefair.jsass-base'

repositories {
  exclusiveContent {
    forRepository {
      maven {
        url "https://oss.jfrog.org/oss-release-local"
        metadataSources { artifact() }
      }
    }
    filter {
      it.includeVersionByRegex("io.ratpack", "ratpack-manual", "1\\.9\\.0-rc-2|1\\.5\\.0-rc-[123]")
    }
  }
  exclusiveContent {
    forRepository {
      mavenCentral() {
        name "mavenCentralManualsNoPom"
        metadataSources { artifact() }
      }
    }
    filter {
      it.includeVersionByRegex("io.ratpack", "ratpack-manual", "^(?!1\\.9\\.0-rc-2\$|1\\.5\\.0-rc-[123]\$|.+-SNAPSHOT\$).*")
    }
  }
  exclusiveContent {
    forRepository {
      maven {
        name "snap"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
        metadataSources { artifact() }
      }
    }
    filter {
      it.includeVersionByRegex("io.ratpack", "ratpack-manual", ".+-SNAPSHOT")
    }
  }
  mavenCentral()
  jcenter()

}

ext {
  manualVersions = [
    "0.9.0", "0.9.1", "0.9.2",
    "0.9.3", "0.9.4", "0.9.5",
    "0.9.6", "0.9.7", "0.9.8",
    "0.9.9", "0.9.10", "0.9.11",
    "0.9.12", "0.9.13", "0.9.14",
    "0.9.15", "0.9.16", "0.9.17",
    "0.9.18", "0.9.19", "1.0.0-rc-1",
    "1.0.0-rc-2", "1.0.0-rc-3", "1.0.0",
    "1.1.0", "1.1.1",
    "1.2.0-RC-1", "1.2.0-rc-2", "1.2.0",
    "1.3.0-rc-1", "1.3.0-rc-2", "1.3.0", "1.3.1", "1.3.2", "1.3.3",
    "1.4.0-rc-1", "1.4.0-rc-2", "1.4.0-rc-3", "1.4.0", "1.4.1", "1.4.2", "1.4.3", "1.4.4", "1.4.5", "1.4.6",
    "1.5.0-rc-1", "1.5.0-rc-2", "1.5.0-rc-3", // Note: these aren't available on Maven Central because the POMs weren't signed
    "1.5.0", "1.5.1", "1.5.2", "1.5.3", "1.5.4",
    "1.6.0-rc-1", "1.6.0-rc-2", "1.6.0-rc-3", "1.6.0-rc-4", "1.6.0", "1.6.1",
    "1.7.0", "1.7.1", "1.7.2", "1.7.3", "1.7.4", "1.7.5", "1.7.6",
    "1.8.0", "1.8.1", "1.8.2",
    "1.9.0-rc-1", "1.9.0-rc-2", "1.9.0",
    "1.10.0-SNAPSHOT"
  ]

  if (!isHeroku && !isCi) {
    logger.info("Only including latest manual in site due to this being a development build.")
//    manualVersions = [manualVersions.last(), "1.9.0-SNAPSHOT"]
  }
}

configurations {
  latestManual {
    // Force resolve of latest snapshot
    resolutionStrategy {
      cacheChangingModulesFor 0, 'seconds'
    }
  }
  newrelicAgent {}
  browserTestImplementation.extendsFrom testImplementation
  browserTestRuntimeOnly.extendsFrom testRuntimeOnly
  providedRuntime
  runtime.extendsFrom providedRuntime
  manualVersions.each {
    delegate."manual-$it"
  }
  runtimeElements.exclude module: "slf4j-simple"
}

ext {
  generatedTestResourcesDir = file("$buildDir/generated-test-resources")
}

sourceSets {
  browserTest {
    compileClasspath += (main.output + test.output)
    runtimeClasspath += (main.output + test.output)
  }
}

dependencies {
  implementation project(":ratpack-groovy")
  implementation project(":ratpack-dropwizard-metrics")
  implementation project(":ratpack-rx2")
  implementation project(":ratpack-newrelic")
  implementation "org.pegdown:pegdown:${commonVersions.pegdown}"

  runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${commonVersions.log4j}", {
    exclude group: "org.slf4j", module: "slf4j-api"
  }
  runtimeOnly "org.apache.logging.log4j:log4j-api:${commonVersions.log4j}"
  runtimeOnly "org.apache.logging.log4j:log4j-core:${commonVersions.log4j}"
  runtimeOnly 'com.lmax:disruptor:3.4.4'

  testImplementation project(":ratpack-groovy-test")
  testImplementation project(":ratpack-test-internal")
  testImplementation commonDependencies.spock
  testImplementation 'org.jsoup:jsoup:1.14.3'
  latestManual isHeroku ? "io.ratpack:ratpack-manual:$version" : project(path: ":ratpack-manual", configuration: "zip")

  browserTestImplementation("org.gebish:geb-spock:5.1") {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
    exclude group: "junit", module: "junit"
  }
  browserTestImplementation "org.seleniumhq.selenium:selenium-chrome-driver:4.1.2", {
    exclude module: 'guava'
    exclude group: "cglib", module: "cglib-nodep"
  }

  manualVersions.each {
    delegate."manual-$it" "io.ratpack:ratpack-manual:$it@zip"
  }

  newrelicAgent "com.newrelic.agent.java:newrelic-agent:${commonVersions.newrelic}"
}

mainClassName = 'ratpack.site.SiteMain'

tasks.withType(Zip) {
  zip64 = true
}

task compileSass(type: SassCompile) {
  doFirst { destinationDir.get().asFile.deleteDir() }
  source = "src/assets/sass"
  includePaths.from "$rootDir/shared-web-assets/sass"
  includePaths.from "$rootDir/shared-web-assets"
  destinationDir = file("build/assets/css")
}

task jsAll(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
  source = [
    "${rootDir}/shared-web-assets/js/modernizr.js",
    "${rootDir}/shared-web-assets/js/prism.js",
  ]
  dest = file("${buildDir}/assets/js/all.min.js")
}

shadowJar {
}

task downloadChromeDriver {
  def version = "2.10"
  inputs.property("version", version)

  def webdriverOs
  if (IS_OS_MAC) {
    webdriverOs = 'mac32'
  } else if (IS_OS_LINUX) {
    webdriverOs = 'linux64'
  } else if (IS_OS_WINDOWS) {
    webdriverOs = 'win32'
  }

  def output = new File(gradle.gradleUserHomeDir, "chromedriver-${version}.zip")
  outputs.file output

  onlyIf {
    !output.exists()
  }
  doLast {
    copyURLToFile(new URL("http://chromedriver.storage.googleapis.com/${version}/chromedriver_${webdriverOs}.zip"), output)
  }
}

task unzipChromeDriver(type: Copy) {
  dependsOn downloadChromeDriver
  from(zipTree(downloadChromeDriver.outputs.files.singleFile))
  into new File(buildDir, "webdriver/driver")
}

task configureWriteTestConfig {
  dependsOn unzipChromeDriver
  doLast {
    if (!isSnapCi) {
      // use relative path to allow Gradle cache relocatability
      def webDriverFile = fileTree(unzipChromeDriver.outputs.files.singleFile).singleFile
      def webDriverRelativeFile = projectDir.toPath().relativize(webDriverFile.toPath())

      writeTestConfig.testProperties.putAll(
        "chromedriver.path": webDriverRelativeFile.toString()
      )
    }
  }
}

task browserTest(type: Test) {
//  dependsOn assetCompile
  classpath = sourceSets.browserTest.runtimeClasspath
  systemProperty "ratpack.development", "true"
  shouldRunAfter test
  testLogging {
    showStandardStreams true
  }
}

task writeTestConfig(type: WriteTestConfig) {
  dependsOn configureWriteTestConfig
  generatedTestResourcesDir = project.generatedTestResourcesDir

  testProperties.putAll(
    manualVersions: manualVersions.collect { it - "-SNAPSHOT" }.join(','),
    currentVersion: version
  )
}

sourceSets.test.resources.srcDir generatedTestResourcesDir

processTestResources.dependsOn writeTestConfig

processResources {
  inputs.files configurations.latestManual
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  into "manual/" + version - "-SNAPSHOT", {
    from { zipTree(configurations.latestManual.singleFile) }
  }
  def configureManualExtraction = { configuration, label ->
    inputs.files configuration
    into "manual/${label - "-SNAPSHOT"}", {
      from { zipTree(configuration.singleFile) }
    }
  }

  manualVersions.each {
    configureManualExtraction(configurations["manual-$it"], it)
  }

  into("public") {
    from compileSass
    from jsAll

    [
      "": ["src/assets/images", "src/assets/css"],
      images: ["$rootDir/shared-web-assets/images"],
      fonts: ["$rootDir/shared-web-assets/fonts"]
    ].each { destination, source ->
      if (destination) {
        into("public/$destination") {
          from(source)
        }
      } else {
        into("public") {
          from(source)
        }
      }
    }
  }
}

distributions.main.contents {
  from "src/heroku"
  into("newrelic") {
    from({ configurations.newrelicAgent }) {
      rename { "agent.jar" }
    }
    from "src/newrelic"
  }
}

distTar {
  compression = Compression.GZIP
  archiveVersion.set(null)
}

run.ext.set("ratpack.flattenClassloaders", true)

distZip {
  enabled = false
}

task deployToHeroku(type: SourceTask) {
  source tasks.distTar

  doLast {
    def apiKey = project.ratpackHerokuApiKey
    File tgz = inputs.files.singleFile

    def heroku = new groovyx.net.http.RESTClient("https://api.heroku.com/apps/ratpack-site/")
    heroku.headers['Authorization'] = "Bearer $apiKey"
    heroku.headers['Accept'] = 'application/vnd.heroku+json; version=3'

    def sourcesResponse = heroku.post(path: 'sources', requestContentType: 'application/json')
    assert sourcesResponse.status == 201
    def sourcesPutUrl = sourcesResponse.data.source_blob.put_url as String
    def sourcesGetUrl = sourcesResponse.data.source_blob.get_url as String

    def sourcesPutConnection = new URL(sourcesPutUrl).openConnection() as HttpURLConnection
    sourcesPutConnection.requestMethod = "PUT"
    sourcesPutConnection.fixedLengthStreamingMode = tgz.length()
    sourcesPutConnection.doOutput = true
    sourcesPutConnection.outputStream.withStream { output ->
      tgz.newInputStream().withStream { input ->
        output << input
      }
    }
    assert sourcesPutConnection.responseCode == 200

    def buildResponse = heroku.post(path: 'builds', requestContentType: 'application/json', body: [
      source_blob: [
        url    : sourcesGetUrl,
        version: "git rev-parse HEAD".execute().text.trim()
      ]
    ])
    def outputStreamUrl = buildResponse.data.output_stream_url as String
    new URL(outputStreamUrl).eachLine { println it }
  }
}
