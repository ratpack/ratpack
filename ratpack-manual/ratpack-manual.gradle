/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.gradle.external.javadoc.internal.AbstractJavadocOptionFileOption
import org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext

import static org.pegdown.Extensions.*

buildscript {
  repositories {
    jcenter()
    gradlePluginPortal()
  }
  dependencies {
    classpath "com.github.robfletcher:compass-gradle-plugin:2.0.6"
    classpath "gradle.plugin.com.github.jengelman.gradle.plugins:gradle-processes:0.5.0"
    classpath "org.pegdown:pegdown:${commonVersions.pegdown}"
    classpath "com.eriwen:gradle-js-plugin:1.12.1"
    classpath "com.google.javascript:closure-compiler:v20150315"
  }
}

description = "The manual for Ratpack (documentation & API reference)"

apply from: "$rootDir/gradle/javaModule.gradle"

apply plugin: "com.github.robfletcher.compass"
apply plugin: "com.eriwen.gradle.js"

jruby {
  execVersion = '9.1.14.0'
}

dependencies {
  compass commonDependencies.compass

  testCompile apiModules
  testCompile("org.pac4j:pac4j-oauth:${commonVersions.pac4j}") { // used by ratpack-pac4j's code snippets
    exclude group: "org.slf4j", module: "slf4j-api"
    exclude group: "com.google.inject", module: "guice"
    exclude group: "org.apache.httpcomponents", module: "httpclient"
    exclude group: "org.apache.commons", module: "commons-lang3"
    exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
  }
  testCompile gradleTestKit()
  testRuntime "org.apache.ant:ant-nodeps:1.8.1"
  testRuntime "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${commonVersions.jackson}"

  testRuntime project(path: ":ratpack-pac4j", configuration: "testRuntime")
}

// Gradle needs to use its version of Groovy, exclude ours
configurations.testCompile.exclude module: "groovy-all"

def projectDependencies = configurations.testCompile.dependencies.withType(ProjectDependency)
assert projectDependencies.any { it.dependencyProject.path == ":ratpack-hikari" }  // Hikari creates a clash on commons logging
projectDependencies.findAll {
  it.dependencyProject.path in [":ratpack-groovy-test", ":ratpack-test-internal"]
}.each {
  it.exclude group: "commons-logging", module: "commons-logging"
}

configurations.all {
  if (it.name in ["testCompile", "testRuntime", "testCompileClasspath", "testRuntimeClasspath"]) {
    resolutionStrategy {
      force "org.reactivestreams:reactive-streams:1.0.0.final"
    }
  }
}

apply from: "$rootDir/gradle/markdown2book.gradle"

idea {
  module {
    excludeDirs += file(".jruby")
    excludeDirs += file(".sass-cache")
  }
}

modifyPom { pom ->
  project {
    name "Ratpack Manual"
  }
}

apiModules.each { evaluationDependsOn(it.path) }
evaluationDependsOn ":ratpack-gradle"

task configureApi() {
  doLast {
    api {
      apiModules.each {
        def packages = []
        def root = it.file("src/main/java")
        root.eachDirRecurse {
          if (it.listFiles().any { it.name.endsWith(".java") }) {
            packages << ((it.absolutePath - root.absolutePath) - "/").replaceAll("/", ".")
          }
        }

        if (it.name == "ratpack-exec") {
          packages = packages - ["ratpack.util", "ratpack.util.internal", "ratpack.func"]
        }
        options.group it.name, packages
      }
    }
  }
}

// Note: does not build viewable docs.
// Docs must be viewed within the manual for styling to work
task api(type: Javadoc) {
  dependsOn configureApi, compassCompile
  group "manual"
  description "Generates the Javadoc for the entire public API"

  ext.stylesheetFile = file("$buildDir/assets/css/javadoc.css")
  inputs.file(stylesheetFile)
  inputs.property("links") { options.links }

  classpath = files()
  destinationDir = file("$buildDir/api")

  apiModules.each {
    source it.sourceSets.main.java
    classpath += it.sourceSets.main.compileClasspath + it.sourceSets.main.output

    if (it.hasProperty("apiLinks")) {
      options.links(*it.apiLinks)
    }
  }

  configure(options) {
    splitIndex true
    use = true
    links "http://docs.oracle.com/javase/8/docs/api/"
    windowTitle "Ratpack API ($project.version)"
    docTitle "Ratpack API ($project.version)"
  }
  options.addStringOption "stylesheetfile", stylesheetFile.absolutePath

  ext.additionalAssets = """
      <script src=\"{@docRoot}/../js/all.min.js\"></script>
      <link rel="stylesheet" type="text/css" href="{@docRoot}/../css/fonts.css">
    """.replaceAll("(^|\\n)\\s*", "")

  options.addOption new AbstractJavadocOptionFileOption<String>("-allow-script-in-comments", null) {
    @Override
    void write(JavadocOptionFileWriterContext context) throws IOException {
      context.writeOption(getOption())
    }

    @Override
    AbstractJavadocOptionFileOption<String> duplicate() {
      this
    }
  }
  options.bottom = ext.additionalAssets

  inputs.property "additionalAssets", ext.additionalAssets
  inputs.property "groups", options.groups

  // For some awesome reason, the 'bottom' arg doesn't get applied to these files
  doLast {
    def replacementString = additionalAssets.replaceAll(java.util.regex.Pattern.quote("{@docRoot}/"), "") + "</html>"
    ["allclasses-frame.html", "allclasses-noframe.html", "overview-frame.html"].each {
      def f = new File(destinationDir, it)
      f.text = f.getText('UTF-8').replace("</html>", replacementString)
    }

    fileTree(dir: destinationDir, include: '**/*.html').each { File f ->
      if (f.text.contains("{@literal @}")) {
        f.text = f.getText('UTF-8').replace("{@literal @}", "@")
      }
    }
  }
}

test {
  dependsOn ":ratpack-gradle:install" // used in gradle snippets
  apiModules.each {
    inputs.files apiModules.sourceSets.main.allSource
    inputs.files project(":ratpack-gradle").sourceSets.main.allSource
  }
  systemProperty "localRepo", rootProject.file("build/localrepo").absolutePath
  systemProperty "gradleUserHome", gradle.gradleUserHomeDir.absolutePath
  systemProperty "gradleHome", gradle.gradleHomeDir.absolutePath
}

task checkApi(type: Checkstyle) {
  group "manual"
  description "Tests that the public API is sufficiently documented"

  source api.source
  configFile = rootProject.file("gradle/checkstyle/checkstyle-api.xml")
  classpath = files()
  reports.xml.destination = reporting.file("checkstyle-api.xml")
  ignoreFailures true
}

task tokeniseManual(type: Sync) {
  group "manual"
  description "Substitute the variables in the manual Markdown files"

  from "src/content"
  into "$buildDir/manual-tokenised"

  ext.substitutionProperties = [
    title             : "Ratpack",
    tagline           : "Simple, lean & powerful HTTP apps",
    "ratpack-version" : project.version,
    "ratpack-group"   : project.group,
    "groovy-version"  : commonVersions.groovy,
    "pac4j-version"   : commonVersions.pac4j,
    "retrofit-version": commonVersions.retrofit,
    "slf4j-version"   : commonVersions.slf4j,
    "gradle-version"  : gradle.gradleVersion,
    head              : """
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="css/normalize.css" rel="stylesheet" type="text/css">
        <!--[if lt IE 8]><link href="css/minimal.css" rel="stylesheet" type="text/css"><![endif]-->
        <!--[if gt IE 7]><!--><link href="css/manual.css" rel="stylesheet" type="text/css"><!--<![endif]-->
        <link href="css/fonts.css" rel="stylesheet" type="text/css">
        <script src="js/all.min.js"></script>
      """,
    footer            : """
        <h2>Ratpack Manual - $version - ${new Date().format("MMMM, yyyy")}</h2>
        <p>
          <a href="http://www.ratpack.io">www.ratpack.io</a><br>
          Licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>
        </p>
      """.toString()
  ] + commonVersions.collectEntries { ["versions-" + it.key, it.value] }

  inputs.properties(substitutionProperties)

  def tokenisableExtensions = ["md", "html"]
  inputs.property("tokenisableExtensions", tokenisableExtensions)

  eachFile { file ->
    if (tokenisableExtensions.any { file.name.endsWith(it) }) {
      file.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: substitutionProperties)
    }
  }
}

task compileManual {
  group "manual"
  description "Converts the manual tokenised Markdown into HTML "

  dependsOn tokeniseManual

  ext.source = tokeniseManual.destinationDir
  inputs.dir(source)

  ext.destination = file("$buildDir/manual-compiled")
  outputs.dir(destination)

  ext.encoding = "UTF-8"
  inputs.property("encoding", encoding)

  ext.options = SMARTYPANTS | FENCED_CODE_BLOCKS
  inputs.property("options", options)

  doLast {
    markdown2book.generate(source, destination, options)
  }
}

jruby {
  gemInstallDir = file("${gradle.gradleUserHomeDir}/ruby-gems")
}

compass {
  gemDir = file("${gradle.gradleUserHomeDir}/ruby-gems")
  sassDir = file("src/sass")
  cssDir = file("$buildDir/assets/css")
  imagesDir = file("$buildDir/assets/images")
  importPath = files('../ratpack-site/src/assets/shared-styles')
  fontsDir = file('../ratpack-site/src/assets/shared-styles/fonts')
  relativeAssets = true
  quiet = true
  debugInfo = false
  environment = 'production'
}

task jsDev(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
  source = [
    "${projectDir}/src/assets/js/anchorHighlight.js",
    "${projectDir}/src/assets/js/toggleImports.js"
  ]
  dest = file("${buildDir}/assets/js/all-dev.js")
}

minifyJs {
  source = jsDev
  dest = file("${buildDir}/assets/js/all-dev.min.js")
  closure {
    warningLevel = "QUIET"
  }
}

task jsAll(type: com.eriwen.gradle.js.tasks.CombineJsTask, dependsOn: minifyJs) {
  source = [
    "${projectDir}/src/assets/js/googleAnalytics.js",
    "${projectDir}/src/assets/js/modernizr.js",
    "${projectDir}/src/assets/js/prism.js",
    "${projectDir}/src/assets/js/jquery.js",
    "${projectDir}/src/assets/js/contents.js",
    "${projectDir}/src/assets/js/contentsInitializer.js",
    "${buildDir}/assets/js/all-dev.min.js"
  ]
  dest = file("${buildDir}/assets/js/all.min.js")
}

task stylizeManual(type: Sync) {
  into "$buildDir/stylized-manual"
  from compileManual
  from(compassCompile) {
    exclude 'bin/'
    exclude 'build_info/'
    exclude 'cache/'
    exclude 'doc/'
    exclude 'gems/'
    exclude 'specifications/'
  }
  from jsAll
}

file("src/assets").eachDir { File dir ->
  def task = task("copy${dir.name.capitalize()}", type: Sync) {
    from dir
    into "$buildDir/assets/$dir.name"
  }

  compassCompile.dependsOn task

  stylizeManual {
    into dir.name, {
      from task
    }
  }
}

tasks.withType(com.github.jrubygradle.JRubyExec) {
  maxHeapSize "128m"
}

task packageManual(type: Sync) {
  group "manual"
  description "Brings together the compiled manual and API reference"

  into "$buildDir/manual"
  from stylizeManual

  into("api") {
    from api
  }
}

task openManual(dependsOn: packageManual) {
  group "manual"
  description "Builds the manual, then opens it in your web browser"

  doLast {
    new java.awt.Desktop().browse(file("$packageManual.destinationDir/index.html").toURI())
  }
}

task openApi(dependsOn: packageManual) {
  group "manual"
  description "Builds the API reference, then opens it in your web browser"

  doLast {
    new java.awt.Desktop().browse(file("$packageManual.destinationDir/api/index.html").toURI())
  }
}

task manualZip(type: Zip) {
  from packageManual
}

configurations {
  published.extendsFrom zip
}

artifacts {
  zip manualZip
}
