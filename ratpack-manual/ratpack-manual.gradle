/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/javaModule.gradle"
configurations.runtime.artifacts.clear()
configurations.archives.artifacts.clear()

apply plugin: 'compass'

buildscript {
  repositories {
    jcenter()
    maven { url 'http://dl.bintray.com/robfletcher/gradle-plugins' }
  }
  dependencies {
    classpath 'org.gradle.plugins:gradle-compass:1.0.7'
    classpath "org.pegdown:pegdown:1.2.1"
  }
}

dependencies {
  testRuntime "org.apache.ant:ant-nodeps:1.8.1"

  testCompile apiModules
}
apply from: "$rootDir/gradle/markdown2book.gradle"

idea {
  module {
    excludeDirs += file(".jruby")
    excludeDirs += file(".sass-cache")
  }
}

modifyPom { pom ->
  project {
    name "Ratpack Manual"
  }
}

apiModules.each { evaluationDependsOn(it.path) }

task configureApi << {
  api {
    apiModules.each {
      def packages = []
      def root = it.file("src/main/java")
      root.eachDirRecurse {
        if (it.listFiles().any { it.name.endsWith(".java") }) {
          packages << ((it.absolutePath - root.absolutePath) - "/").replaceAll("/", ".")
        }
      }

      options.group it.name, packages
    }

    options.bottom = "<script src=\"{@docRoot}/ga.js\"></script><script src=\"{@docRoot}/prism.js\" data-manual></script><script src=\"{@docRoot}/highlight.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"{@docRoot}/prism.css\">"

    doLast {
      copy {
        into api.destinationDir
        from "src/assets/js/prism.js"
        from "src/assets/js/ga.js"
        from "src/api-assets"
      }
    }

    inputs.files files("src/api-assets")
    inputs.files files("src/assets/js/prism.js")
    inputs.property "bottom", options.bottom
    inputs.property "groups", options.groups
  }
}

task api(type: Javadoc, dependsOn: configureApi) {
  group "manual"
  description "Generates the Javadoc for the entire public API"

  classpath = files()
  destinationDir = file("$buildDir/api")

  apiModules.each {
    source it.sourceSets.main.java
    classpath += it.sourceSets.main.compileClasspath + it.sourceSets.main.output

    if (it.hasProperty("apiLinks")) {
      options.links(* it.apiLinks)
    }
  }

  configure(options) {
    splitIndex true
    use = true
    links "http://docs.oracle.com/javase/7/docs/api"
    windowTitle "Ratpack API ($project.version)"
    docTitle "Ratpack API ($project.version)"
  }
}

test {
  apiModules.each {
    inputs.files apiModules.sourceSets.main.allSource
  }
}

task checkApi(type: Checkstyle) {
  group "manual"
  description "Tests that the public API is sufficiently documented"

  source api.source
  configFile = rootProject.file("gradle/checkstyle/checkstyle-api.xml")
  classpath = files()
  reports.xml.destination = reporting.file("checkstyle-api.xml")
  ignoreFailures true
}

task tokeniseManual(type: Sync) {
  group "manual"
  description "Substitute the variables in the manual Markdown files"

  from "src/content"
  into "$buildDir/manual-tokenised"

  ext.substitutionProperties = [
      title: "Ratpack",
      tagline: "A toolkit for JVM web applications",
      "ratpack-version": project.version,
      "ratpack-group": project.group,
      "groovy-version": groovyVersion,
      "manual-url": "http://oss.jfrog.org/artifactory/repo/org/ratpack-framework/ratpack-manual/$version/ratpack-manual-${version}.zip".toString(),
      head: """
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width">
        <link href="http://fonts.googleapis.com/css?family=Lora:400,700,400italic|Engagement|Playfair+Display:700" rel="stylesheet" type="text/css">
        <link href="css/normalize.css" rel="stylesheet" type="text/css">
        <!--[if lt IE 8]><link href="css/minimal.css" rel="stylesheet" type="text/css"><![endif]-->
        <!--[if gt IE 7]><!--><link href="css/stylesheet.css" rel="stylesheet" type="text/css"><!--<![endif]-->
        <script src="js/modernizr.js"></script>
        <script src="js/prism.js"></script>
        <script src="js/ga.js"></script>
      """,
      footer: """
        <h2>Ratpack Manual - $version - ${new Date().format("MMMM, yyyy")}</h2>
        <p>
          <a href="http://www.ratpack-framework.org">www.ratpack-framework.org</a><br>
          Licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>
        </p>
      """.toString()
  ]

  inputs.properties(substitutionProperties)

  def tokenisableExtensions = ["md", "html"]
  inputs.property("tokenisableExtensions", tokenisableExtensions)

  eachFile { file ->
    if (tokenisableExtensions.any { file.name.endsWith(it) }) {
      file.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: substitutionProperties)
    }
  }
}

import static org.pegdown.Extensions.*

task compileManual {
  group "manual"
  description "Converts the manual tokenised Markdown into HTML "

  dependsOn tokeniseManual

  ext.source = tokeniseManual.destinationDir
  inputs.dir(source)

  ext.destination = file("$buildDir/manual-compiled")
  outputs.dir(destination)

  ext.encoding = "UTF-8"
  inputs.property("encoding", encoding)

  ext.options = SMARTYPANTS | FENCED_CODE_BLOCKS
  inputs.property("options", options)

  doLast {
    markdown2book.generate(source, destination, options)
  }
}

compass {
  sassDir = file("src/sass")
  cssDir = file("$buildDir/assets/css")
  imagesDir = file("$buildDir/assets/images")
  importPath = files('../ratpack-stylesheets')
  relativeAssets = true
  encoding = 'UTF-8'
  quiet = true
}

task stylizeManual(type: Sync) {
  into "$buildDir/stylized-manual"
  from compileManual
  from compileSass
}

file("src/assets").eachDir { File dir ->
  def task = task("copy${dir.name.capitalize()}", type: Sync) {
    from dir
    into "$buildDir/assets/$dir.name"
  }

  compileSass.dependsOn task

  stylizeManual {
    into dir.name, {
      from task
    }
  }
}

task packageManual(type: Sync) {
  group "manual"
  description "Brings together the compiled manual and API reference"

  into "$buildDir/manual"
  from stylizeManual

  into("api") {
    from api
  }
}

task openManual(dependsOn: packageManual) {
  group "manual"
  description "Builds the manual, then opens it in your web browser"

  doLast {
    new java.awt.Desktop().browse(file("$packageManual.destinationDir/index.html").toURI())
  }
}

task openApi(dependsOn: api) {
  group "manual"
  description "Builds the API reference, then opens it in your web browser"

  doLast {
    new java.awt.Desktop().browse(file("$api.destinationDir/index.html").toURI())
  }
}

task manualZip(type: Zip) {
  from packageManual
}

artifacts {
  delegate.default manualZip
}
