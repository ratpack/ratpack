configurations.all { configuration ->
  resolutionStrategy {
    gradle.taskGraph.whenReady { taskGraph ->
      if (configuration.state != Configuration.State.RESOLVED && taskGraph.allTasks.every { it.name != "dependencies" } ) {
        failOnVersionConflict()
      }
    }

    eachDependency {
      // JRuby (used by the manual) pulls in multiple versions of a few modules
      if (configuration.name == "jrubyExec") {
        if (requested.name == "jcodings" && requested.group == "org.jruby.jcodings") {
          useVersion "1.0.10"
        }
        if (requested.name == "jnr-ffi" && requested.group == "com.github.jnr") {
          useVersion "1.0.10"
        }
        if (requested.name == "jnr-constants" && requested.group == "com.github.jnr") {
          useVersion "0.8.5"
        }
      }
      if (configuration.name == "codenarc") {
        if (requested.group == "org.codehaus.groovy") {
          useVersion commonVersions.groovy
        }
      }
    }
  }

  incoming.afterResolve { incoming ->
    incoming.resolutionResult.allDependencies {
      if (it instanceof ResolvedDependencyResult) {
        if (configuration.name != "codenarc" &&
          it.selected.moduleVersion.group == "org.codehaus.groovy" &&
          it.selected.moduleVersion.name == "groovy" &&
          !configuration.name.startsWith("test") &&
          project.name != "perf" && 
          project.name != "ratpack-groovy" &&
          project.name != "ratpack-groovy-test" &&
          project.name != "ratpack-remote" &&
          project.name != "ratpack-remote-test" &&
          project.name != "ratpack-site" &&
          project.name != "ratpack-test-internal") {
          throw new InvalidUserDataException("groovy in dependency graph of $configuration.name of project $project.name")
        }
      }
    }
  }
}
