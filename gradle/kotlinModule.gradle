/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'

ext.getProperty = { String name, String value ->
    project.hasProperty (name)? project.property (name) : value
}

ext.testngVersion = getProperty ('testngVersion', '6.9.+')
ext.mockitoVersion = getProperty ('mockitoVersion', '1.10.+')

ext.filterPatterns = getProperty ('filterPatterns', '*.properties, *.txt, *.xml')
ext.rootBuildDir = rootProject.buildDir

repositories {
    jcenter ()
    mavenCentral ()
    mavenLocal ()
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-test', version: kotlinVersion
    testCompile group: 'org.testng', name: 'testng', version: testngVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
}

processResources {
    filterPatterns.split(',').each {pattern ->
        filesMatching ('**/' + pattern.trim ()) {
            filter {
                it
                    .replace ('${projectVersion}', project.version)
                    .replace ('${projectName}', project.name)
                    .replace ('${bootstrapVersion}', bootstrapVersion)
            }
        }
    }
}

test {
    useTestNG ()
}

dokka {
    outputFormat = 'javadoc'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
