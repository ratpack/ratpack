/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "groovy"
apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/codenarc.gradle"

sourceSets.main {
  resources {
    srcDir rootProject.file("shared-resources")
  }
}

dependencies {
  testCompile commonDependencies.groovy
  testCompile commonDependencies.spock
  testCompile project(":ratpack-test-internal")
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

tasks.withType(AbstractCompile) {
  options.compilerArgs << "-Werror" << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-serial"
}

task sourceJar(type: Jar) {
  description "An archive of the source code for Maven Central"
  classifier "sources"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  description "An archive of the JavaDocs for Maven Central"
  classifier "javadoc"
  from javadoc
}

artifacts {
  archives javadocJar, sourceJar
}

signing {
  if (!isSnapshot) {
    sign configurations.archives
  }
}

install {
  repositories {
    mavenDeployer {
      repository(url: localRepoUrl)
    }
  }
}

install.repositories["mavenInstaller"].beforeDeployment { deployment ->
  if (!isSnapshot) {
    artifacts {
      signatures signing.signPom(deployment)
    }
  }
}

configurations {
  configurations {
    all {
      incoming.afterResolve {
        dependencies.withType(ModuleDependency) { dep ->
          excludeRules.each {
            if ([it.group, it.module].any { it == null }) {
              throw new InvalidUserDataException(
                "Partial exclude for dependency '$dep.group:$dep.name:$dep.version' of $project: [group: $it.group, module: $it.module]\n\nExcludes must specify both group and module and neither can be '*'."
              )
            }
          }
        }
      }
    }
  }
}

javadoc {
  doFirst {
    if (project.ext.has("apiLinks")) {
      options.links(* project.apiLinks)
    }
  }
}

task codeQuality {
  dependsOn tasks.withType(CodeNarc), tasks.withType(Checkstyle)

}
