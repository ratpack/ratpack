/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "jacoco"
apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/codenarc.gradle"
apply from: "$rootDir/gradle/projectLocalRepo.gradle"

dependencies {
  testCompile commonDependencies.groovy
  testCompile commonDependencies.spock
  testCompile project(":ratpack-test-internal")
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

tasks.withType(AbstractCompile) {
  options.compilerArgs << "-Werror" << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-serial"
  options.compilerArgs << "-Xlint:-classfile" // Needed due to https://issues.jboss.org/browse/JASSIST-245
}

if (project.path != ":ratpack-benchmark") {
  tasks.withType(JavaCompile) {
    options.compilerArgs = ["-proc:none"]
  }
  tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = "512m"
    options.compilerArgs = ["-proc:none"]
    allprojects { mustRunAfter tasks.withType(CodeNarc) }
  }
}

tasks.withType(Javadoc) {
  options.encoding = "utf-8"
  options.docEncoding = "utf-8"
  options.charSet = "utf-8"
  exclude "**/internal/**"

  options.addStringOption('Xdoclint:none', '-quiet')

  doFirst {
    if (project.ext.has("apiLinks")) {
      options.links(*project.apiLinks)
    }
  }
}

javadoc {
  options.links "http://ratpack.io/manual/${version - "-SNAPSHOT"}/api"
}

task sourceJar(type: Jar) {
  description "An archive of the source code for Maven Central"
  classifier "sources"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  description "An archive of the JavaDocs for Maven Central"
  classifier "javadoc"
  from javadoc
}

artifacts {
  published javadocJar, sourceJar, jar
}

tasks.withType(Test) {
  allprojects {
    mustRunAfter tasks.withType(Checkstyle)
  }

  jvmArgs "-Xss320k", "-XX:MaxDirectMemorySize=64m"
  minHeapSize "256m"
  maxHeapSize "512m"

  testLogging {
    exceptionFormat "full"
  }

  doFirst {
    if (isCloudCi) {
      maxParallelForks 1
      systemProperty "cloudCi", "true"
    }
  }

  environment "GRADLE_USER_HOME", gradle.gradleUserHomeDir
}

jacoco {
  toolVersion = "0.8.2"
}

task codeQuality {
  dependsOn tasks.withType(CodeNarc), tasks.withType(Checkstyle)
}

jacocoTestReport {
  additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(sourceSets.main.allSource.srcDirs)
  classDirectories = files(sourceSets.main.output)
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = false
  }
}
