buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.gradle.api.plugins:gradle-clover-plugin:0.6.1'
  }
}

allprojects {
  group = 'org.ratpack-framework'
  version = rootProject.file("shared-resources/org/ratpackframework/ratpack-version.txt").text.trim()

  apply plugin: 'idea'
  apply plugin: 'eclipse'

  repositories {
    mavenCentral()
  }
}

apply from: "idea/idea.gradle"

ext.commonDependencies = [
    spock: dependencies.create('org.spockframework:spock-core:0.7-groovy-2.0', {
      exclude module: "groovy-all"
    }),
    groovy: dependencies.create('org.codehaus.groovy:groovy-all:2.1.3')
]

subprojects {
  if (project.name.endsWith("-test")) {
    return
  }

  apply plugin: 'maven'
  apply from: "${rootDir}/gradle/pom.gradle"
  apply plugin: 'signing'

  plugins.withType(JavaPlugin) {
    sourceSets.main {
      resources {
        srcDir rootProject.file("shared-resources")
      }
    }

    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"

    tasks.withType(Javadoc) {
      options.encoding = 'utf-8'
      options.docEncoding = 'utf-8'
      options.charSet = 'utf-8'
      options.links(
          "http://docs.oracle.com/javase/7/docs/api",
          "http://google-guice.googlecode.com/git/javadoc",
          "http://docs.jboss.org/netty/3.2/api",
          "http://groovy.codehaus.org/api"
      )
      exclude '**/internal/**'
    }

    task sourceJar(type: Jar) {
      description 'An archive of the source code for Maven Central'
      classifier 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
      description 'An archive of the JavaDocs for Maven Central'
      classifier 'javadoc'
      from javadoc
    }

    artifacts {
      archives javadocJar, sourceJar
    }

    signing {
      sign configurations.archives
      required { gradle.taskGraph.hasTask(uploadArchives) }
    }

    install {
      repositories {
        mavenDeployer {
          repository(url: "file://${rootProject.rootDir.absolutePath}/localrepo")
        }
      }
    }

    uploadArchives { task ->
      repositories.mavenDeployer {
        beforeDeployment { deployment ->
          signing.signPom(deployment)
        }
        gradle.taskGraph.whenReady { taskGraph ->
          if (taskGraph.hasTask(task)) {
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: mavenCentralUsername, password: mavenCentralPassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
              authentication(userName: mavenCentralUsername, password: mavenCentralPassword)
            }
          }
        }
      }
    }

    modifyPom {
      project {
        description 'A Micro Web Framework for Groovy'
        url 'https://github.com/ratpack/ratpack'
        licenses {
          license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
          }
        }
        developers {
          developer {
            id 'tlberglund'
            name 'Tim Berglund'
            email 'tlberglund@gmail.com'
          }
          developer {
            id 'ldaley'
            name 'Luke Daley'
            email 'ld@ldaley.com'
          }
        }
        scm {
          connection 'scm:https://ratpack@github.com/ratpack/ratpack'
          developerConnection 'scm:git@github.com:ratpack/ratpack.git'
          url 'https://github.com/ratpack/ratpack'
        }
      }
    }
  }
}

if (hasProperty('enableClover')) {
  configure([rootProject, project(':ratpack-core'), project(':ratpack-gradle'), project(':ratpack-groovy')]) {
    apply from: rootProject.file("gradle/clover.gradle")
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.5'
}
