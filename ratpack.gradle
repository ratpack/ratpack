/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.gradle.api.plugins:gradle-clover-plugin:0.6.1"
  }
}

def jvmEncoding = java.nio.charset.Charset.defaultCharset().name()
if (jvmEncoding != "UTF-8") {
  throw new IllegalStateException("Build environment must be UTF-8 (it is: $jvmEncoding) - Set GRADLE_OPTS to include -Dfile.encoding=UTF-8")
}

allprojects {
  group = "org.ratpack-framework"
  version = rootProject.file("shared-resources/org/ratpackframework/ratpack-version.txt").text.trim()

  apply plugin: "idea"
  apply plugin: "eclipse"

  repositories {
    mavenCentral()
  }

  def noClover = ["ratpack-site", "ratpack-manual"]
  if (project.hasProperty("enableClover") && !noClover.contains(project.name)) {
    project.apply from: rootProject.file("gradle/clover.gradle")
  }
}

apply from: "gradle/idea/idea.gradle"

ext {
  groovyVersion = "2.1.3"
  isSnapshot = version.endsWith("SNAPSHOT")

  commonDependencies = [
      spock: dependencies.create("org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: "groovy-all"
      }),
      groovy: dependencies.create("org.codehaus.groovy:groovy-all:$groovyVersion")
  ]

  apiModules = [
      "ratpack-core", "ratpack-groovy", "ratpack-guice", "ratpack-session"
  ].collect { project(it) }

  publishedModules = [
      "ratpack-core", "ratpack-groovy", "ratpack-guice", "ratpack-session", "ratpack-test-support",
      "ratpack-manual"
  ].collect { project(it) }
}


subprojects {
  tasks.withType(Upload).matching { it.name != "install" }.all {
    rootProject.subprojects {
      mustRunAfter tasks.matching { it instanceof VerificationTask }
    }
  }

  tasks.withType(Test) {
    allprojects {
      mustRunAfter tasks.withType(Checkstyle)
    }
  }

  tasks.withType(Javadoc) {
    options.encoding = "utf-8"
    options.docEncoding = "utf-8"
    options.charSet = "utf-8"
    exclude "**/internal/**"
  }

  apply plugin: "maven"
  apply from: "${rootDir}/gradle/pom.gradle"
  apply plugin: "signing"

  if (rootProject.hasProperty("ciBuild")) {
    plugins.withType(ReportingBasePlugin) {
      reporting.baseDir = rootProject.file("build/reports/$name")
    }
  }

  plugins.withType(JavaPlugin) {
    sourceSets.main {
      resources {
        srcDir rootProject.file("shared-resources")
      }
    }

    tasks.withType(AbstractCompile) {
      options.compilerArgs << "-Werror" <<  "-Xlint:all" << "-Xlint:-options"
    }

    test {
      testLogging {
        events "failed"
        exceptionFormat "full"
      }
    }

    sourceCompatibility = "1.6"
    targetCompatibility = "1.6"

    task sourceJar(type: Jar) {
      description "An archive of the source code for Maven Central"
      classifier "sources"
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
      description "An archive of the JavaDocs for Maven Central"
      classifier "javadoc"
      from javadoc
    }

    artifacts {
      archives javadocJar, sourceJar
    }

    signing {
      if (!isSnapshot) {
        sign configurations.archives
      }
      required { gradle.taskGraph.hasTask(uploadArchives) }
    }

    install {
      repositories {
        mavenDeployer {
          repository(url: "file://${rootProject.buildDir.absolutePath}/localrepo")
        }
      }
    }
  }

  if (project in publishedModules) {
    uploadArchives { task ->
      repositories.mavenDeployer {
        beforeDeployment { deployment ->
          if (!isSnapshot) {
            signing.signPom(deployment)
          }
        }
        gradle.taskGraph.whenReady { taskGraph ->
          if (taskGraph.hasTask(task)) {
            repository(url: "http://oss.jfrog.org/artifactory/simple/oss-release-local") {
              authentication(userName: ratpackBintrayUser, password: ratpackBintrayApiKey)
            }
            snapshotRepository(url: "http://oss.jfrog.org/artifactory/simple/oss-snapshot-local") {
              authentication(userName: ratpackBintrayUser, password: ratpackBintrayApiKey)
            }
          }
        }
      }
    }

    modifyPom {
      project {
        description "A Micro Web Framework for Groovy"
        url "https://github.com/ratpack/ratpack"
        licenses {
          license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
          }
        }
        developers {
          developer {
            id "tlberglund"
            name "Tim Berglund"
            email "tlberglund@gmail.com"
          }
          developer {
            id "ldaley"
            name "Luke Daley"
            email "ld@ldaley.com"
          }
        }
        scm {
          connection "scm:https://ratpack@github.com/ratpack/ratpack"
          developerConnection "scm:git@github.com:ratpack/ratpack.git"
          url "https://github.com/ratpack/ratpack"
        }
      }
    }
  }
}

task ciZip(type: Zip) {
  into "reports", { from "build/reports" }
  into "manual", { from { project(":ratpack-manual").packageManual } }
  archiveName = "ci.zip"
  destinationDir = buildDir
}
